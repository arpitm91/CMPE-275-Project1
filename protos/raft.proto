syntax = "proto3";

package raft;

enum LogOperation {
    UploadRequested = 0;
    Uploaded = 1;
    UploadFaied = 2;
    Deleted = 3;
    TemporaryUnavailable = 4;

    // Used below operations only with DC/PROXY
    Available = 5;
    Unavailable = 6;
}

enum LogType {
    FileLog = 0;
    DatacenterLog = 1;
    ProxyLog = 2;
}

enum Vote {
    YES = 0;
    NO = 1;
}

enum ReplicationState {
    ReplicationPending = 0;
    ReplicationRequested = 1;
    ReplicationStarted = 2;
    ReplicationCompleted = 3;
}

message Ack {
	int64 id = 1;
}

message TableLog {
    string fileName = 1;
    int64 chunkId = 2;
    string ip = 3;
    string port = 4;
    int64 log_index = 5;
    LogOperation operation = 6;
    LogType logType = 7;
}

message Table {
    int64 cycle_number = 1;
    string leader_ip = 2;
    string leader_port = 3;
    repeated TableLog tableLog = 4;
}

message Candidacy {
    int64 cycle_number = 1;
    string ip = 2;
    string port = 3;
    int64 log_length = 4;
}

message CandidacyResponse {
    Vote voted = 1;
    int64 cycle_number = 2;
}

message  DataCenterInfo {
	string ip = 1;
	string port = 2;
}

message  ProxyInfoRaft {
	string ip = 1;
	string port = 2;
}

message Empty {
}

message ReplicationInfo {
    string fileName = 1;
    int64 chunkId = 2;
    DataCenterInfo fromDatacenter = 3;
}

message ChunkUploadInfo {
    int64 chunkId = 1;
    DataCenterInfo uploadedDatacenter = 2;
}

message UploadCompleteFileInfo {
    string fileName = 1;
    ChunkUploadInfo chunkUploadInfo = 2;
    bool isSuccess = 3;
}

message RequestChunkInfo {
	string fileName = 1;
	int64 chunkId = 2;			// Starts from 0 - N
}

message ChunkLocationInfo {
	string fileName = 1;
	int64 chunkId = 2;
	repeated DataCenterInfo lstDataCenter = 3;
	bool isChunkFound = 4;
}

service RaftService {
    // (Raft -> Raft) : Raft heartbeats
    rpc RaftHeartbeat (Table) returns (Ack);

    // (Raft -> Raft) :Raft voting
    rpc RequestVote (Candidacy) returns (CandidacyResponse);

    // (Raft -> Raft) : Raft adding log
    rpc AddFileLog (TableLog) returns (Ack);

    // (Data center -> Raft) : Registers data centers
    rpc AddDataCenter (DataCenterInfo) returns (Ack);

    // (Proxy -> Raft) : Registers Proxy
    rpc AddProxy (ProxyInfoRaft) returns (Ack);

    // (Data center -> Raft) : Signals upload completed to raft
    rpc FileUploadCompleted(UploadCompleteFileInfo) returns(Ack);

    // (Proxy -> Raft) : Fetches location of an existing file from raft
    rpc GetChunkLocationInfo(RequestChunkInfo) returns(ChunkLocationInfo);

    // (Proxy -> Raft) : Fetches location to upload a file from raft
    rpc GetChunkUploadInfo(RequestChunkInfo) returns(ChunkLocationInfo);
}

service ProxyService {
    // (Raft -> Proxy) : Heartbeat for proxy
    rpc ProxyHeartbeat(TableLog) returns (Empty);
}

service DataCenterService {
    // (Raft -> Data center) : Heartbeat for data center
    rpc DataCenterHeartbeat(Empty) returns (Empty);

    // (Raft -> Data center) : Start a replication
    rpc ReplicationInitiate(ReplicationInfo) returns (Ack);
}