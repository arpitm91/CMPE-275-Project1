// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogOperation int32

const (
	LogOperation_UploadRequested      LogOperation = 0
	LogOperation_Uploaded             LogOperation = 1
	LogOperation_UploadFaied          LogOperation = 2
	LogOperation_Deleted              LogOperation = 3
	LogOperation_TemporaryUnavailable LogOperation = 4
	// Used below operations only with DC/PROXY
	LogOperation_Available   LogOperation = 5
	LogOperation_Unavailable LogOperation = 6
)

var LogOperation_name = map[int32]string{
	0: "UploadRequested",
	1: "Uploaded",
	2: "UploadFaied",
	3: "Deleted",
	4: "TemporaryUnavailable",
	5: "Available",
	6: "Unavailable",
}

var LogOperation_value = map[string]int32{
	"UploadRequested":      0,
	"Uploaded":             1,
	"UploadFaied":          2,
	"Deleted":              3,
	"TemporaryUnavailable": 4,
	"Available":            5,
	"Unavailable":          6,
}

func (x LogOperation) String() string {
	return proto.EnumName(LogOperation_name, int32(x))
}

func (LogOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

type LogType int32

const (
	LogType_FileLog       LogType = 0
	LogType_DatacenterLog LogType = 1
	LogType_ProxyLog      LogType = 2
)

var LogType_name = map[int32]string{
	0: "FileLog",
	1: "DatacenterLog",
	2: "ProxyLog",
}

var LogType_value = map[string]int32{
	"FileLog":       0,
	"DatacenterLog": 1,
	"ProxyLog":      2,
}

func (x LogType) String() string {
	return proto.EnumName(LogType_name, int32(x))
}

func (LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

type Vote int32

const (
	Vote_YES Vote = 0
	Vote_NO  Vote = 1
)

var Vote_name = map[int32]string{
	0: "YES",
	1: "NO",
}

var Vote_value = map[string]int32{
	"YES": 0,
	"NO":  1,
}

func (x Vote) String() string {
	return proto.EnumName(Vote_name, int32(x))
}

func (Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

type ReplicationState int32

const (
	ReplicationState_ReplicationPending   ReplicationState = 0
	ReplicationState_ReplicationRequested ReplicationState = 1
	ReplicationState_ReplicationStarted   ReplicationState = 2
	ReplicationState_ReplicationCompleted ReplicationState = 3
)

var ReplicationState_name = map[int32]string{
	0: "ReplicationPending",
	1: "ReplicationRequested",
	2: "ReplicationStarted",
	3: "ReplicationCompleted",
}

var ReplicationState_value = map[string]int32{
	"ReplicationPending":   0,
	"ReplicationRequested": 1,
	"ReplicationStarted":   2,
	"ReplicationCompleted": 3,
}

func (x ReplicationState) String() string {
	return proto.EnumName(ReplicationState_name, int32(x))
}

func (ReplicationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

type Ack struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TableLog struct {
	FileName             string       `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkId              int64        `protobuf:"varint,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Ip                   string       `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string       `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	LogIndex             int64        `protobuf:"varint,5,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Operation            LogOperation `protobuf:"varint,6,opt,name=operation,proto3,enum=raft.LogOperation" json:"operation,omitempty"`
	LogType              LogType      `protobuf:"varint,7,opt,name=logType,proto3,enum=raft.LogType" json:"logType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TableLog) Reset()         { *m = TableLog{} }
func (m *TableLog) String() string { return proto.CompactTextString(m) }
func (*TableLog) ProtoMessage()    {}
func (*TableLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *TableLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableLog.Unmarshal(m, b)
}
func (m *TableLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableLog.Marshal(b, m, deterministic)
}
func (m *TableLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableLog.Merge(m, src)
}
func (m *TableLog) XXX_Size() int {
	return xxx_messageInfo_TableLog.Size(m)
}
func (m *TableLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TableLog.DiscardUnknown(m)
}

var xxx_messageInfo_TableLog proto.InternalMessageInfo

func (m *TableLog) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *TableLog) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *TableLog) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TableLog) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *TableLog) GetLogIndex() int64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

func (m *TableLog) GetOperation() LogOperation {
	if m != nil {
		return m.Operation
	}
	return LogOperation_UploadRequested
}

func (m *TableLog) GetLogType() LogType {
	if m != nil {
		return m.LogType
	}
	return LogType_FileLog
}

type Table struct {
	CycleNumber          int64       `protobuf:"varint,1,opt,name=cycle_number,json=cycleNumber,proto3" json:"cycle_number,omitempty"`
	LeaderIp             string      `protobuf:"bytes,2,opt,name=leader_ip,json=leaderIp,proto3" json:"leader_ip,omitempty"`
	LeaderPort           string      `protobuf:"bytes,3,opt,name=leader_port,json=leaderPort,proto3" json:"leader_port,omitempty"`
	TableLog             []*TableLog `protobuf:"bytes,4,rep,name=tableLog,proto3" json:"tableLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *Table) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Table.Unmarshal(m, b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Table.Marshal(b, m, deterministic)
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return xxx_messageInfo_Table.Size(m)
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetCycleNumber() int64 {
	if m != nil {
		return m.CycleNumber
	}
	return 0
}

func (m *Table) GetLeaderIp() string {
	if m != nil {
		return m.LeaderIp
	}
	return ""
}

func (m *Table) GetLeaderPort() string {
	if m != nil {
		return m.LeaderPort
	}
	return ""
}

func (m *Table) GetTableLog() []*TableLog {
	if m != nil {
		return m.TableLog
	}
	return nil
}

type Candidacy struct {
	CycleNumber          int64    `protobuf:"varint,1,opt,name=cycle_number,json=cycleNumber,proto3" json:"cycle_number,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	LogLength            int64    `protobuf:"varint,4,opt,name=log_length,json=logLength,proto3" json:"log_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Candidacy) Reset()         { *m = Candidacy{} }
func (m *Candidacy) String() string { return proto.CompactTextString(m) }
func (*Candidacy) ProtoMessage()    {}
func (*Candidacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *Candidacy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candidacy.Unmarshal(m, b)
}
func (m *Candidacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candidacy.Marshal(b, m, deterministic)
}
func (m *Candidacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidacy.Merge(m, src)
}
func (m *Candidacy) XXX_Size() int {
	return xxx_messageInfo_Candidacy.Size(m)
}
func (m *Candidacy) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidacy.DiscardUnknown(m)
}

var xxx_messageInfo_Candidacy proto.InternalMessageInfo

func (m *Candidacy) GetCycleNumber() int64 {
	if m != nil {
		return m.CycleNumber
	}
	return 0
}

func (m *Candidacy) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Candidacy) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Candidacy) GetLogLength() int64 {
	if m != nil {
		return m.LogLength
	}
	return 0
}

type CandidacyResponse struct {
	Voted                Vote     `protobuf:"varint,1,opt,name=voted,proto3,enum=raft.Vote" json:"voted,omitempty"`
	CycleNumber          int64    `protobuf:"varint,2,opt,name=cycle_number,json=cycleNumber,proto3" json:"cycle_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CandidacyResponse) Reset()         { *m = CandidacyResponse{} }
func (m *CandidacyResponse) String() string { return proto.CompactTextString(m) }
func (*CandidacyResponse) ProtoMessage()    {}
func (*CandidacyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *CandidacyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandidacyResponse.Unmarshal(m, b)
}
func (m *CandidacyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandidacyResponse.Marshal(b, m, deterministic)
}
func (m *CandidacyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidacyResponse.Merge(m, src)
}
func (m *CandidacyResponse) XXX_Size() int {
	return xxx_messageInfo_CandidacyResponse.Size(m)
}
func (m *CandidacyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidacyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CandidacyResponse proto.InternalMessageInfo

func (m *CandidacyResponse) GetVoted() Vote {
	if m != nil {
		return m.Voted
	}
	return Vote_YES
}

func (m *CandidacyResponse) GetCycleNumber() int64 {
	if m != nil {
		return m.CycleNumber
	}
	return 0
}

type DataCenterInfo struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataCenterInfo) Reset()         { *m = DataCenterInfo{} }
func (m *DataCenterInfo) String() string { return proto.CompactTextString(m) }
func (*DataCenterInfo) ProtoMessage()    {}
func (*DataCenterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *DataCenterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterInfo.Unmarshal(m, b)
}
func (m *DataCenterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterInfo.Marshal(b, m, deterministic)
}
func (m *DataCenterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterInfo.Merge(m, src)
}
func (m *DataCenterInfo) XXX_Size() int {
	return xxx_messageInfo_DataCenterInfo.Size(m)
}
func (m *DataCenterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterInfo proto.InternalMessageInfo

func (m *DataCenterInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DataCenterInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type ProxyInfoRaft struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProxyInfoRaft) Reset()         { *m = ProxyInfoRaft{} }
func (m *ProxyInfoRaft) String() string { return proto.CompactTextString(m) }
func (*ProxyInfoRaft) ProtoMessage()    {}
func (*ProxyInfoRaft) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{6}
}

func (m *ProxyInfoRaft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyInfoRaft.Unmarshal(m, b)
}
func (m *ProxyInfoRaft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyInfoRaft.Marshal(b, m, deterministic)
}
func (m *ProxyInfoRaft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyInfoRaft.Merge(m, src)
}
func (m *ProxyInfoRaft) XXX_Size() int {
	return xxx_messageInfo_ProxyInfoRaft.Size(m)
}
func (m *ProxyInfoRaft) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyInfoRaft.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyInfoRaft proto.InternalMessageInfo

func (m *ProxyInfoRaft) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ProxyInfoRaft) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{7}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ReplicationInfo struct {
	FileName             string          `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkId              int64           `protobuf:"varint,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	FromDatacenter       *DataCenterInfo `protobuf:"bytes,3,opt,name=fromDatacenter,proto3" json:"fromDatacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReplicationInfo) Reset()         { *m = ReplicationInfo{} }
func (m *ReplicationInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicationInfo) ProtoMessage()    {}
func (*ReplicationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{8}
}

func (m *ReplicationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicationInfo.Unmarshal(m, b)
}
func (m *ReplicationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicationInfo.Marshal(b, m, deterministic)
}
func (m *ReplicationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationInfo.Merge(m, src)
}
func (m *ReplicationInfo) XXX_Size() int {
	return xxx_messageInfo_ReplicationInfo.Size(m)
}
func (m *ReplicationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationInfo proto.InternalMessageInfo

func (m *ReplicationInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ReplicationInfo) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ReplicationInfo) GetFromDatacenter() *DataCenterInfo {
	if m != nil {
		return m.FromDatacenter
	}
	return nil
}

type ChunkUploadInfo struct {
	ChunkId              int64           `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	UploadedDatacenter   *DataCenterInfo `protobuf:"bytes,2,opt,name=uploadedDatacenter,proto3" json:"uploadedDatacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ChunkUploadInfo) Reset()         { *m = ChunkUploadInfo{} }
func (m *ChunkUploadInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkUploadInfo) ProtoMessage()    {}
func (*ChunkUploadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{9}
}

func (m *ChunkUploadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkUploadInfo.Unmarshal(m, b)
}
func (m *ChunkUploadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkUploadInfo.Marshal(b, m, deterministic)
}
func (m *ChunkUploadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkUploadInfo.Merge(m, src)
}
func (m *ChunkUploadInfo) XXX_Size() int {
	return xxx_messageInfo_ChunkUploadInfo.Size(m)
}
func (m *ChunkUploadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkUploadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkUploadInfo proto.InternalMessageInfo

func (m *ChunkUploadInfo) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ChunkUploadInfo) GetUploadedDatacenter() *DataCenterInfo {
	if m != nil {
		return m.UploadedDatacenter
	}
	return nil
}

type UploadCompleteFileInfo struct {
	FileName             string           `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkUploadInfo      *ChunkUploadInfo `protobuf:"bytes,2,opt,name=chunkUploadInfo,proto3" json:"chunkUploadInfo,omitempty"`
	IsSuccess            bool             `protobuf:"varint,3,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadCompleteFileInfo) Reset()         { *m = UploadCompleteFileInfo{} }
func (m *UploadCompleteFileInfo) String() string { return proto.CompactTextString(m) }
func (*UploadCompleteFileInfo) ProtoMessage()    {}
func (*UploadCompleteFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{10}
}

func (m *UploadCompleteFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadCompleteFileInfo.Unmarshal(m, b)
}
func (m *UploadCompleteFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadCompleteFileInfo.Marshal(b, m, deterministic)
}
func (m *UploadCompleteFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCompleteFileInfo.Merge(m, src)
}
func (m *UploadCompleteFileInfo) XXX_Size() int {
	return xxx_messageInfo_UploadCompleteFileInfo.Size(m)
}
func (m *UploadCompleteFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCompleteFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCompleteFileInfo proto.InternalMessageInfo

func (m *UploadCompleteFileInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadCompleteFileInfo) GetChunkUploadInfo() *ChunkUploadInfo {
	if m != nil {
		return m.ChunkUploadInfo
	}
	return nil
}

func (m *UploadCompleteFileInfo) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

type RequestChunkInfo struct {
	FileName             string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkId              int64    `protobuf:"varint,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestChunkInfo) Reset()         { *m = RequestChunkInfo{} }
func (m *RequestChunkInfo) String() string { return proto.CompactTextString(m) }
func (*RequestChunkInfo) ProtoMessage()    {}
func (*RequestChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{11}
}

func (m *RequestChunkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestChunkInfo.Unmarshal(m, b)
}
func (m *RequestChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestChunkInfo.Marshal(b, m, deterministic)
}
func (m *RequestChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestChunkInfo.Merge(m, src)
}
func (m *RequestChunkInfo) XXX_Size() int {
	return xxx_messageInfo_RequestChunkInfo.Size(m)
}
func (m *RequestChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestChunkInfo proto.InternalMessageInfo

func (m *RequestChunkInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *RequestChunkInfo) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

type ChunkLocationInfo struct {
	FileName             string            `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ChunkId              int64             `protobuf:"varint,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	LstDataCenter        []*DataCenterInfo `protobuf:"bytes,3,rep,name=lstDataCenter,proto3" json:"lstDataCenter,omitempty"`
	IsChunkFound         bool              `protobuf:"varint,4,opt,name=isChunkFound,proto3" json:"isChunkFound,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChunkLocationInfo) Reset()         { *m = ChunkLocationInfo{} }
func (m *ChunkLocationInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkLocationInfo) ProtoMessage()    {}
func (*ChunkLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{12}
}

func (m *ChunkLocationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkLocationInfo.Unmarshal(m, b)
}
func (m *ChunkLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkLocationInfo.Marshal(b, m, deterministic)
}
func (m *ChunkLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkLocationInfo.Merge(m, src)
}
func (m *ChunkLocationInfo) XXX_Size() int {
	return xxx_messageInfo_ChunkLocationInfo.Size(m)
}
func (m *ChunkLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkLocationInfo proto.InternalMessageInfo

func (m *ChunkLocationInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ChunkLocationInfo) GetChunkId() int64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ChunkLocationInfo) GetLstDataCenter() []*DataCenterInfo {
	if m != nil {
		return m.LstDataCenter
	}
	return nil
}

func (m *ChunkLocationInfo) GetIsChunkFound() bool {
	if m != nil {
		return m.IsChunkFound
	}
	return false
}

func init() {
	proto.RegisterEnum("raft.LogOperation", LogOperation_name, LogOperation_value)
	proto.RegisterEnum("raft.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("raft.Vote", Vote_name, Vote_value)
	proto.RegisterEnum("raft.ReplicationState", ReplicationState_name, ReplicationState_value)
	proto.RegisterType((*Ack)(nil), "raft.Ack")
	proto.RegisterType((*TableLog)(nil), "raft.TableLog")
	proto.RegisterType((*Table)(nil), "raft.Table")
	proto.RegisterType((*Candidacy)(nil), "raft.Candidacy")
	proto.RegisterType((*CandidacyResponse)(nil), "raft.CandidacyResponse")
	proto.RegisterType((*DataCenterInfo)(nil), "raft.DataCenterInfo")
	proto.RegisterType((*ProxyInfoRaft)(nil), "raft.ProxyInfoRaft")
	proto.RegisterType((*Empty)(nil), "raft.Empty")
	proto.RegisterType((*ReplicationInfo)(nil), "raft.ReplicationInfo")
	proto.RegisterType((*ChunkUploadInfo)(nil), "raft.ChunkUploadInfo")
	proto.RegisterType((*UploadCompleteFileInfo)(nil), "raft.UploadCompleteFileInfo")
	proto.RegisterType((*RequestChunkInfo)(nil), "raft.RequestChunkInfo")
	proto.RegisterType((*ChunkLocationInfo)(nil), "raft.ChunkLocationInfo")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 952 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x49, 0xd9, 0x92, 0x86, 0xfa, 0xa1, 0x57, 0xb6, 0x43, 0xb8, 0x29, 0xea, 0xf2, 0x62,
	0x43, 0x87, 0x34, 0x50, 0x0a, 0x18, 0x08, 0x0a, 0xb4, 0x82, 0x7f, 0x12, 0x03, 0x82, 0x63, 0x50,
	0x76, 0xd1, 0x9e, 0x8c, 0x35, 0x77, 0xa5, 0x2c, 0x42, 0x71, 0x69, 0x6a, 0x65, 0x44, 0x87, 0x1e,
	0x7b, 0xe8, 0xb9, 0x7d, 0x89, 0xbe, 0x49, 0x1f, 0xa2, 0x0f, 0x53, 0xec, 0x90, 0x94, 0x48, 0xc9,
	0x68, 0xdd, 0xe4, 0xa6, 0x99, 0x9d, 0xbf, 0xef, 0x9b, 0x1f, 0x0a, 0x20, 0xa1, 0x23, 0xf5, 0x22,
	0x4e, 0xa4, 0x92, 0xa4, 0xa2, 0x7f, 0x7b, 0xbb, 0x60, 0xf5, 0x83, 0x0f, 0xa4, 0x05, 0xa6, 0x60,
	0xae, 0x71, 0x60, 0x1c, 0x59, 0xbe, 0x29, 0x98, 0xf7, 0xb7, 0x01, 0xb5, 0x6b, 0x7a, 0x17, 0xf2,
	0x81, 0x1c, 0x93, 0x7d, 0xa8, 0x8d, 0x44, 0xc8, 0x2f, 0xe9, 0x84, 0xa3, 0x49, 0xdd, 0x5f, 0xc8,
	0xc4, 0x85, 0x6a, 0xf0, 0x7e, 0x16, 0x7d, 0xb8, 0x60, 0xae, 0x89, 0xde, 0xb9, 0x88, 0x21, 0x63,
	0xd7, 0x42, 0x7b, 0x53, 0xc4, 0x84, 0x40, 0x25, 0x96, 0x89, 0x72, 0x2b, 0xa8, 0xc1, 0xdf, 0xe4,
	0x0b, 0xa8, 0x87, 0x72, 0x7c, 0x2b, 0x22, 0xc6, 0x3f, 0xba, 0x9b, 0xe8, 0x5f, 0x0b, 0xe5, 0xf8,
	0x42, 0xcb, 0xe4, 0x25, 0xd4, 0x65, 0xcc, 0x13, 0xaa, 0x84, 0x8c, 0xdc, 0xad, 0x03, 0xe3, 0xa8,
	0xd5, 0x23, 0x2f, 0x10, 0xc0, 0x40, 0x8e, 0xdf, 0xe5, 0x2f, 0xfe, 0xd2, 0x88, 0x1c, 0x42, 0x35,
	0x94, 0xe3, 0xeb, 0x79, 0xcc, 0xdd, 0x2a, 0xda, 0x37, 0x17, 0xf6, 0x5a, 0xe9, 0xe7, 0xaf, 0xde,
	0x1f, 0x06, 0x6c, 0x22, 0x3c, 0xf2, 0x35, 0x34, 0x82, 0x79, 0x10, 0xf2, 0xdb, 0x68, 0x36, 0xb9,
	0xe3, 0x49, 0x46, 0x81, 0x8d, 0xba, 0x4b, 0x54, 0x61, 0x91, 0x9c, 0x32, 0x9e, 0xdc, 0x8a, 0x18,
	0x41, 0xd6, 0xfd, 0x5a, 0xaa, 0xb8, 0x88, 0xc9, 0x57, 0x60, 0x67, 0x8f, 0x08, 0x2e, 0x85, 0x0b,
	0xa9, 0xea, 0x4a, 0x43, 0xec, 0x42, 0x4d, 0x65, 0x44, 0xba, 0x95, 0x03, 0xeb, 0xc8, 0xee, 0xb5,
	0xd2, 0xa2, 0x72, 0x7a, 0xfd, 0xc5, 0xbb, 0x77, 0x0f, 0xf5, 0x13, 0x1a, 0x31, 0xc1, 0x68, 0x30,
	0x7f, 0x4a, 0x65, 0x29, 0xc5, 0xe6, 0x1a, 0xc5, 0x56, 0x81, 0xe2, 0x2f, 0x01, 0x34, 0xc5, 0x21,
	0x8f, 0xc6, 0xea, 0x3d, 0x92, 0x6f, 0xf9, 0x9a, 0xf4, 0x01, 0x2a, 0xbc, 0x9f, 0x60, 0x7b, 0x91,
	0xd2, 0xe7, 0xd3, 0x58, 0x46, 0x53, 0x4e, 0x0e, 0x60, 0xf3, 0x41, 0x2a, 0x9e, 0x0e, 0x44, 0xab,
	0x07, 0x69, 0xc1, 0x3f, 0x4a, 0xc5, 0xfd, 0xf4, 0x61, 0xad, 0x38, 0x73, 0xad, 0x38, 0xef, 0x5b,
	0x68, 0x9d, 0x52, 0x45, 0x4f, 0x78, 0xa4, 0x78, 0x72, 0x11, 0x8d, 0x64, 0x56, 0xae, 0xb1, 0x56,
	0xae, 0xb9, 0x2c, 0xd7, 0x7b, 0x05, 0xcd, 0xab, 0x44, 0x7e, 0x9c, 0x6b, 0x07, 0x9f, 0x8e, 0xd4,
	0x93, 0x9c, 0xaa, 0xb0, 0x79, 0x36, 0x89, 0xd5, 0xdc, 0xfb, 0xd5, 0x80, 0xb6, 0xcf, 0xe3, 0x50,
	0x04, 0x38, 0x10, 0x98, 0xf5, 0xd3, 0xa6, 0xf7, 0x3b, 0x68, 0x8d, 0x12, 0x39, 0xd1, 0x08, 0x02,
	0x44, 0x80, 0xa4, 0xda, 0xbd, 0x9d, 0x94, 0x8b, 0x32, 0x32, 0x7f, 0xc5, 0xd6, 0xbb, 0x87, 0xf6,
	0x89, 0x0e, 0x74, 0x13, 0x87, 0x92, 0x32, 0x2c, 0xa3, 0x90, 0xca, 0x28, 0xa7, 0x3a, 0x05, 0x32,
	0x43, 0x3b, 0xce, 0x0a, 0xe9, 0xcc, 0x7f, 0x49, 0xf7, 0x88, 0xbd, 0xf7, 0xbb, 0x01, 0x7b, 0x69,
	0xba, 0x13, 0x39, 0x89, 0x43, 0xae, 0xf8, 0xb9, 0x08, 0xf9, 0x7f, 0x32, 0xf0, 0x3d, 0xb4, 0x83,
	0x72, 0xa5, 0x59, 0xe6, 0xdd, 0x34, 0xf3, 0x0a, 0x0c, 0x7f, 0xd5, 0x9a, 0x3c, 0x87, 0xba, 0x98,
	0x0e, 0x67, 0x41, 0xc0, 0xa7, 0x53, 0xe4, 0xa8, 0xe6, 0x2f, 0x15, 0xde, 0x5b, 0x70, 0x7c, 0x7e,
	0x3f, 0xe3, 0x53, 0x85, 0x81, 0x3e, 0xbd, 0x21, 0xde, 0x9f, 0x06, 0x6c, 0x63, 0x8c, 0x81, 0xfc,
	0xec, 0xe6, 0xbe, 0x86, 0x66, 0x38, 0x55, 0x4b, 0x52, 0x5d, 0x0b, 0x17, 0xf3, 0x71, 0xb2, 0xcb,
	0xa6, 0xc4, 0x83, 0x86, 0x98, 0x62, 0x21, 0xe7, 0x72, 0x16, 0x31, 0xdc, 0xa8, 0x9a, 0x5f, 0xd2,
	0x75, 0x7f, 0x33, 0xa0, 0x51, 0xbc, 0x51, 0xa4, 0x03, 0xed, 0x94, 0xb2, 0x8c, 0x0c, 0xce, 0x9c,
	0x0d, 0xd2, 0x80, 0xda, 0x4d, 0xd6, 0x47, 0xc7, 0x20, 0x6d, 0xb0, 0x53, 0xe9, 0x9c, 0x0a, 0xce,
	0x1c, 0x93, 0xd8, 0x50, 0x3d, 0xe5, 0xba, 0x8f, 0xcc, 0xb1, 0x88, 0x0b, 0x3b, 0xd7, 0x7c, 0x12,
	0xcb, 0x84, 0x26, 0xf3, 0x9b, 0x88, 0x3e, 0x50, 0x11, 0xea, 0xa3, 0xe1, 0x54, 0x48, 0x13, 0xea,
	0xfd, 0x85, 0xb8, 0x89, 0x61, 0x0a, 0xef, 0x5b, 0xdd, 0x63, 0xa8, 0x66, 0xe7, 0x4f, 0x47, 0xd4,
	0x33, 0x31, 0x90, 0x63, 0x67, 0x83, 0x6c, 0x43, 0x73, 0x39, 0x3d, 0x5a, 0x65, 0xe8, 0x82, 0x70,
	0xf7, 0xb4, 0x64, 0x76, 0x9f, 0x41, 0x45, 0x6f, 0x3c, 0xa9, 0x82, 0xf5, 0xf3, 0xd9, 0xd0, 0xd9,
	0x20, 0x5b, 0x60, 0x5e, 0xbe, 0x73, 0x8c, 0xee, 0x83, 0xee, 0xe9, 0x62, 0xc7, 0x86, 0x8a, 0x2a,
	0x4e, 0xf6, 0x80, 0x14, 0x74, 0x57, 0x3c, 0x62, 0x22, 0xd2, 0x59, 0x5c, 0xd8, 0x29, 0xe8, 0x97,
	0xe8, 0x8d, 0x15, 0x8f, 0xa1, 0xa2, 0x89, 0x42, 0xd8, 0x65, 0x8f, 0x7c, 0x96, 0x99, 0x63, 0xf5,
	0xfe, 0xb2, 0xc0, 0xd6, 0x27, 0x61, 0xc8, 0x93, 0x07, 0x11, 0x70, 0x72, 0x08, 0x4d, 0x2d, 0xbe,
	0xe5, 0x34, 0x51, 0x77, 0x9c, 0x2a, 0x62, 0x17, 0x0e, 0xeb, 0x7e, 0x3d, 0x15, 0xf4, 0xc7, 0xed,
	0x18, 0xec, 0x2c, 0x33, 0x02, 0x6a, 0x67, 0x93, 0x9d, 0x9f, 0xbd, 0xfd, 0x67, 0x2b, 0x8a, 0xc5,
	0x1d, 0x3c, 0x04, 0xe8, 0x33, 0x96, 0x71, 0x46, 0x56, 0xee, 0x76, 0x31, 0xc3, 0x4b, 0x68, 0xf6,
	0x19, 0x2b, 0x4c, 0xc9, 0xa3, 0xa3, 0x54, 0xf4, 0xe8, 0x42, 0xad, 0xcf, 0x18, 0xd2, 0x4d, 0x3a,
	0xa9, 0xba, 0x74, 0xf7, 0x8a, 0xb6, 0x3f, 0x40, 0x47, 0xd7, 0x50, 0xde, 0x6e, 0x46, 0x9e, 0xa7,
	0x16, 0x8f, 0x2f, 0xfd, 0x7e, 0x46, 0x06, 0xde, 0x45, 0xf2, 0x06, 0x76, 0xde, 0x70, 0xb5, 0xbe,
	0x3e, 0x7b, 0xa9, 0xd1, 0xea, 0x8a, 0x2e, 0x18, 0x59, 0x73, 0x38, 0x03, 0x92, 0x07, 0x2a, 0xdc,
	0x80, 0xff, 0x1b, 0xa6, 0xf7, 0x1a, 0x1a, 0x88, 0x36, 0x6f, 0x65, 0x17, 0x5a, 0x28, 0xaf, 0xf5,
	0x12, 0xcb, 0x2f, 0x61, 0xe9, 0xfd, 0x02, 0xdb, 0x4b, 0x5a, 0xf3, 0x00, 0xdf, 0x40, 0x67, 0xa9,
	0x7c, 0x42, 0x14, 0x72, 0x0c, 0x9d, 0xd2, 0x87, 0x42, 0x28, 0xa1, 0xe7, 0x78, 0x37, 0x47, 0x52,
	0xfa, 0x86, 0x14, 0x9a, 0x71, 0xb7, 0x85, 0xff, 0x9e, 0x5e, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x59, 0x66, 0xd5, 0x9b, 0x4b, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftServiceClient is the client API for RaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftServiceClient interface {
	// (Raft -> Raft) : Raft heartbeats
	RaftHeartbeat(ctx context.Context, in *Table, opts ...grpc.CallOption) (*Ack, error)
	// (Raft -> Raft) :Raft voting
	RequestVote(ctx context.Context, in *Candidacy, opts ...grpc.CallOption) (*CandidacyResponse, error)
	// (Raft -> Raft) : Raft adding log
	AddFileLog(ctx context.Context, in *TableLog, opts ...grpc.CallOption) (*Ack, error)
	// (Data center -> Raft) : Registers data centers
	AddDataCenter(ctx context.Context, in *DataCenterInfo, opts ...grpc.CallOption) (*Ack, error)
	// (Proxy -> Raft) : Registers Proxy
	AddProxy(ctx context.Context, in *ProxyInfoRaft, opts ...grpc.CallOption) (*Ack, error)
	// (Data center -> Raft) : Signals upload completed to raft
	FileUploadCompleted(ctx context.Context, in *UploadCompleteFileInfo, opts ...grpc.CallOption) (*Empty, error)
	// (Proxy -> Raft) : Fetches location of an existing file from raft
	GetChunkLocationInfo(ctx context.Context, in *RequestChunkInfo, opts ...grpc.CallOption) (*ChunkLocationInfo, error)
	// (Proxy -> Raft) : Fetches location to upload a file from raft
	GetChunkUploadInfo(ctx context.Context, in *RequestChunkInfo, opts ...grpc.CallOption) (*ChunkLocationInfo, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) RaftHeartbeat(ctx context.Context, in *Table, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/raft.RaftService/RaftHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) RequestVote(ctx context.Context, in *Candidacy, opts ...grpc.CallOption) (*CandidacyResponse, error) {
	out := new(CandidacyResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftService/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) AddFileLog(ctx context.Context, in *TableLog, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/raft.RaftService/AddFileLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) AddDataCenter(ctx context.Context, in *DataCenterInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/raft.RaftService/AddDataCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) AddProxy(ctx context.Context, in *ProxyInfoRaft, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/raft.RaftService/AddProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) FileUploadCompleted(ctx context.Context, in *UploadCompleteFileInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/raft.RaftService/FileUploadCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) GetChunkLocationInfo(ctx context.Context, in *RequestChunkInfo, opts ...grpc.CallOption) (*ChunkLocationInfo, error) {
	out := new(ChunkLocationInfo)
	err := c.cc.Invoke(ctx, "/raft.RaftService/GetChunkLocationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) GetChunkUploadInfo(ctx context.Context, in *RequestChunkInfo, opts ...grpc.CallOption) (*ChunkLocationInfo, error) {
	out := new(ChunkLocationInfo)
	err := c.cc.Invoke(ctx, "/raft.RaftService/GetChunkUploadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServiceServer is the server API for RaftService service.
type RaftServiceServer interface {
	// (Raft -> Raft) : Raft heartbeats
	RaftHeartbeat(context.Context, *Table) (*Ack, error)
	// (Raft -> Raft) :Raft voting
	RequestVote(context.Context, *Candidacy) (*CandidacyResponse, error)
	// (Raft -> Raft) : Raft adding log
	AddFileLog(context.Context, *TableLog) (*Ack, error)
	// (Data center -> Raft) : Registers data centers
	AddDataCenter(context.Context, *DataCenterInfo) (*Ack, error)
	// (Proxy -> Raft) : Registers Proxy
	AddProxy(context.Context, *ProxyInfoRaft) (*Ack, error)
	// (Data center -> Raft) : Signals upload completed to raft
	FileUploadCompleted(context.Context, *UploadCompleteFileInfo) (*Empty, error)
	// (Proxy -> Raft) : Fetches location of an existing file from raft
	GetChunkLocationInfo(context.Context, *RequestChunkInfo) (*ChunkLocationInfo, error)
	// (Proxy -> Raft) : Fetches location to upload a file from raft
	GetChunkUploadInfo(context.Context, *RequestChunkInfo) (*ChunkLocationInfo, error)
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_RaftHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RaftHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/RaftHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RaftHeartbeat(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Candidacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RequestVote(ctx, req.(*Candidacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_AddFileLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AddFileLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/AddFileLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AddFileLog(ctx, req.(*TableLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_AddDataCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCenterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AddDataCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/AddDataCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AddDataCenter(ctx, req.(*DataCenterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_AddProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyInfoRaft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AddProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/AddProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AddProxy(ctx, req.(*ProxyInfoRaft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_FileUploadCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCompleteFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).FileUploadCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/FileUploadCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).FileUploadCompleted(ctx, req.(*UploadCompleteFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_GetChunkLocationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).GetChunkLocationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/GetChunkLocationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).GetChunkLocationInfo(ctx, req.(*RequestChunkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_GetChunkUploadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).GetChunkUploadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/GetChunkUploadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).GetChunkUploadInfo(ctx, req.(*RequestChunkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RaftHeartbeat",
			Handler:    _RaftService_RaftHeartbeat_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftService_RequestVote_Handler,
		},
		{
			MethodName: "AddFileLog",
			Handler:    _RaftService_AddFileLog_Handler,
		},
		{
			MethodName: "AddDataCenter",
			Handler:    _RaftService_AddDataCenter_Handler,
		},
		{
			MethodName: "AddProxy",
			Handler:    _RaftService_AddProxy_Handler,
		},
		{
			MethodName: "FileUploadCompleted",
			Handler:    _RaftService_FileUploadCompleted_Handler,
		},
		{
			MethodName: "GetChunkLocationInfo",
			Handler:    _RaftService_GetChunkLocationInfo_Handler,
		},
		{
			MethodName: "GetChunkUploadInfo",
			Handler:    _RaftService_GetChunkUploadInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// (Raft -> Proxy) : Heartbeat for proxy
	ProxyHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type proxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyServiceClient(cc *grpc.ClientConn) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) ProxyHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/raft.ProxyService/ProxyHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
type ProxyServiceServer interface {
	// (Raft -> Proxy) : Heartbeat for proxy
	ProxyHeartbeat(context.Context, *Empty) (*Empty, error)
}

func RegisterProxyServiceServer(s *grpc.Server, srv ProxyServiceServer) {
	s.RegisterService(&_ProxyService_serviceDesc, srv)
}

func _ProxyService_ProxyHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).ProxyHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.ProxyService/ProxyHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).ProxyHeartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyHeartbeat",
			Handler:    _ProxyService_ProxyHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

// DataCenterServiceClient is the client API for DataCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataCenterServiceClient interface {
	// (Raft -> Data center) : Heartbeat for data center
	DataCenterHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// (Raft -> Data center) : Start a replication
	ReplicationInitiate(ctx context.Context, in *ReplicationInfo, opts ...grpc.CallOption) (*Ack, error)
}

type dataCenterServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataCenterServiceClient(cc *grpc.ClientConn) DataCenterServiceClient {
	return &dataCenterServiceClient{cc}
}

func (c *dataCenterServiceClient) DataCenterHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/raft.DataCenterService/DataCenterHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCenterServiceClient) ReplicationInitiate(ctx context.Context, in *ReplicationInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/raft.DataCenterService/ReplicationInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCenterServiceServer is the server API for DataCenterService service.
type DataCenterServiceServer interface {
	// (Raft -> Data center) : Heartbeat for data center
	DataCenterHeartbeat(context.Context, *Empty) (*Empty, error)
	// (Raft -> Data center) : Start a replication
	ReplicationInitiate(context.Context, *ReplicationInfo) (*Ack, error)
}

func RegisterDataCenterServiceServer(s *grpc.Server, srv DataCenterServiceServer) {
	s.RegisterService(&_DataCenterService_serviceDesc, srv)
}

func _DataCenterService_DataCenterHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCenterServiceServer).DataCenterHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.DataCenterService/DataCenterHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCenterServiceServer).DataCenterHeartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCenterService_ReplicationInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCenterServiceServer).ReplicationInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.DataCenterService/ReplicationInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCenterServiceServer).ReplicationInitiate(ctx, req.(*ReplicationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.DataCenterService",
	HandlerType: (*DataCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataCenterHeartbeat",
			Handler:    _DataCenterService_DataCenterHeartbeat_Handler,
		},
		{
			MethodName: "ReplicationInitiate",
			Handler:    _DataCenterService_ReplicationInitiate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
